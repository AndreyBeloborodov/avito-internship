// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "merch-shop/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// MerchRepository is an autogenerated mock type for the MerchRepository type
type MerchRepository struct {
	mock.Mock
}

// GetMerchByName provides a mock function with given fields: name
func (_m *MerchRepository) GetMerchByName(name string) (*models.Merch, error) {
	ret := _m.Called(name)

	if len(ret) == 0 {
		panic("no return value specified for GetMerchByName")
	}

	var r0 *models.Merch
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.Merch, error)); ok {
		return rf(name)
	}
	if rf, ok := ret.Get(0).(func(string) *models.Merch); ok {
		r0 = rf(name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Merch)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMerchRepository creates a new instance of MerchRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMerchRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MerchRepository {
	mock := &MerchRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
