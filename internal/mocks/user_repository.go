// Code generated by mockery v2.52.2. DO NOT EDIT.

package mocks

import (
	models "merch-shop/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// UserRepository is an autogenerated mock type for the UserRepository type
type UserRepository struct {
	mock.Mock
}

// BuyMerch provides a mock function with given fields: user, merch
func (_m *UserRepository) BuyMerch(user *models.User, merch *models.Merch) error {
	ret := _m.Called(user, merch)

	if len(ret) == 0 {
		panic("no return value specified for BuyMerch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, *models.Merch) error); ok {
		r0 = rf(user, merch)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CreateUser provides a mock function with given fields: user
func (_m *UserRepository) CreateUser(user *models.User) error {
	ret := _m.Called(user)

	if len(ret) == 0 {
		panic("no return value specified for CreateUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User) error); ok {
		r0 = rf(user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetCoinHistory provides a mock function with given fields: userID
func (_m *UserRepository) GetCoinHistory(userID uint) (models.CoinHistory, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetCoinHistory")
	}

	var r0 models.CoinHistory
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (models.CoinHistory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) models.CoinHistory); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Get(0).(models.CoinHistory)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserByUsername provides a mock function with given fields: username
func (_m *UserRepository) GetUserByUsername(username string) (*models.User, error) {
	ret := _m.Called(username)

	if len(ret) == 0 {
		panic("no return value specified for GetUserByUsername")
	}

	var r0 *models.User
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*models.User, error)); ok {
		return rf(username)
	}
	if rf, ok := ret.Get(0).(func(string) *models.User); ok {
		r0 = rf(username)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserInventory provides a mock function with given fields: userID
func (_m *UserRepository) GetUserInventory(userID uint) ([]models.Item, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for GetUserInventory")
	}

	var r0 []models.Item
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) ([]models.Item, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(uint) []models.Item); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Item)
		}
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SendCoin provides a mock function with given fields: fromUser, toUser, amount
func (_m *UserRepository) SendCoin(fromUser *models.User, toUser *models.User, amount int) error {
	ret := _m.Called(fromUser, toUser, amount)

	if len(ret) == 0 {
		panic("no return value specified for SendCoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*models.User, *models.User, int) error); ok {
		r0 = rf(fromUser, toUser, amount)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewUserRepository creates a new instance of UserRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRepository {
	mock := &UserRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
